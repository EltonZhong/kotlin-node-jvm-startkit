buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlinx-serialization'

idea {
    module {
        downloadSources = true
    }
}

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}

group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'nodeJs', {
            configure(compilations.main) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    metaInfo = true
                    sourceMap = true
                    moduleKind = 'commonjs'
                    outputFile = "node/kotlin/index.js"
                    // Whether we should call main func directly in kotlin
                    main = "call"
                    sourceMapEmbedSources = "always"
                }
            }

            configure(compilations.test) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    metaInfo = true
                    sourceMap = true
                    moduleKind = 'commonjs'
                    sourceMapEmbedSources = "always"
                }
            }
        })
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        nodeJsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        nodeJsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

def dump(obj) {
    println("${obj.class.name}:")
    obj.properties.each { println "$it.key : ${it?.value?.class?.name}   ->   $it.value" }
    def names = obj.properties['names']
    if (names != null) {
        println(":: names: $names")
    }
}

task node(dependsOn: [nodeJsJar]) {
    doLast {
        copy {
            def nodeJsCompilations = kotlin.targets.nodeJs.compilations
            from nodeJsCompilations.main.output
            from kotlin.sourceSets.nodeJsMain.resources.srcDirs
            dump(kotlin.sourceSets.nodeJsMain)
            dump(nodeJsCompilations.main)
            nodeJsCompilations.main.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into "node/kotlin-dependencies"
        }
    }
}
